{"version":3,"file":"rider.js","sourceRoot":"","sources":["../../../src/services/rider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,2BAA2B;AAC3B,mDAAmD;AACnD,6CAA0C;AAG7B,QAAA,MAAM,GAAG,GAAS,EAAE;IAC7B,OAAO,SAAS,CAAC,MAAM,EAAE,CAAC;AAC9B,CAAC,CAAA,CAAC;AAEW,QAAA,OAAO,GAAG,CAAO,EAAU,EAAE,EAAE;IACxC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC3C,IAAI,CAAC,MAAM,EAAE;QACT,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;KACjC;IACD,OAAO,MAAM,CAAC;AAClB,CAAC,CAAA,CAAC;AAEW,QAAA,aAAa,GAAG,CAAO,OAAsB,EAAE,EAAE;IAC1D,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE;QACxB,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KAChC,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,IAAI,aAAK,EAAE,CAAC;IAE1B,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7C,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAA,CAAC;AAEW,QAAA,WAAW,GAAG,CAAO,EAAU,EAAE,OAA6B,EAAE,EAAE;IAC3E,MAAM,GAAG,CAAC,QAAQ,mBAAM,OAAO,IAAE,EAAE,KAAI;QACnC,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC3B,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KAChC,CAAC,CAAC;IACH,MAAM,eAAO,CAAC,EAAE,CAAC,CAAC;IAClB,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACnD,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAA,CAAC;AAEW,QAAA,UAAU,GAAG,CAAO,EAAU,EAAE,EAAE;IAC3C,MAAM,MAAM,GAAG,MAAM,eAAO,CAAC,EAAE,CAAC,CAAC;IACjC,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAChD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC7B,CAAC,CAAA,CAAC;AAEW,QAAA,UAAU,GAAG,CAAO,EAAU,EAAE,EAAE;IAC3C,MAAM,MAAM,GAAG,MAAM,eAAO,CAAC,EAAE,CAAC,CAAC;IACjC,MAAM,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC/B,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC7B,CAAC,CAAA,CAAC","sourcesContent":["import * as boom from 'boom';\nimport * as joi from 'joi';\nimport * as riderRepo from '../repositories/rider';\nimport { Rider } from '../entities/rider';\nimport { IRiderRequest, IRiderProfileRequest } from '../interfaces/rider';\n\nexport const getAll = async () => {\n    return riderRepo.getAll();\n};\n\nexport const getById = async (id: number) => {\n    const result = await riderRepo.getById(id);\n    if (!result) {\n        boom.badRequest('Invalid id');\n    }\n    return result;\n};\n\nexport const registerRider = async (payload: IRiderRequest) => {\n    await joi.validate(payload, {\n        name: joi.string().required()\n    });\n    const rider = new Rider();\n    //TODO populate fields here\n    const result = await riderRepo.insert(rider);\n    return result[0];\n};\n\nexport const updateRider = async (id: number, payload: IRiderProfileRequest) => {\n    await joi.validate({ ...payload, id }, {\n        id: joi.number().required(),\n        name: joi.string().required()\n    });\n    await getById(id);\n    const result = await riderRepo.update(id, payload);\n    return result[0];\n};\n\nexport const softDelete = async (id: number) => {\n    const result = await getById(id);\n    await riderRepo.update(id, { isDeleted: true });\n    return { success: true };\n};\n\nexport const hardDelete = async (id: number) => {\n    const result = await getById(id);\n    await riderRepo.hardDelete(id);\n    return { success: true };\n};\n"]}